{"version":3,"sources":["components/NavBar.js","components/LessonList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","position","Toolbar","Typography","variant","color","useStyles","makeStyles","card","maxWidth","margin","bullet","display","transform","title","fontSize","pos","marginBottom","media","height","paddingTop","borderRadius","listItems","img","map","lesson","Grid","item","xs","sm","md","Card","className","CardContent","borderColor","border","gutterBottom","align","CardMedia","component","image","CardActions","Fab","href","extendedIcon","LessonList","container","spacing","alignItems","justify","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAmBeA,EAdA,WACb,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,WAAlC,6C,yECEJC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,OAAQ,QAEVC,OAAQ,CACNC,QAAS,eACTF,OAAQ,QACRG,UAAW,cAEbC,MAAO,CACLC,SAAU,GAEZC,IAAK,CACHC,aAAc,IAEhBC,MAAO,CACLC,OAAQ,EACRC,WAAY,SACZC,aAAc,MAeZC,EARU,CACd,CAAER,MAAO,kBAAmBS,IAAK,gCACjC,CAAET,MAAO,iBAAkBS,IAAK,gCAChC,CAAET,MAAO,gBAAiBS,IAAK,gCAC/B,CAAET,MAAO,uBAAwBS,IAAK,gCACtC,CAAET,MAAO,kBAAmBS,IAAK,gCACjC,CAAET,MAAO,uBAAwBS,IAAK,iCAEdC,KAAI,SAACC,GAAD,OAC5B,kBAAEC,EAAA,EAAF,CAAOC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC7B,kBAACC,EAAA,EAAD,CAAMC,UAAW1B,EAAUE,MAEzB,kBAACyB,EAAA,EAAD,CAAaC,YAAY,aAAaC,OAAQ,GAC5C,kBAAChC,EAAA,EAAD,CAAYC,QAAQ,KAAK4B,UAAW1B,EAAUQ,MAAOT,MAAM,gBAAgB+B,cAAY,EAACC,MAAM,UAC3FZ,EAAOX,OAEV,kBAACwB,EAAA,EAAD,CACEC,UAAU,MACVP,UAAW1B,EAAUY,MACrBsB,MAAOf,EAAOF,IACdT,MAAM,iBAGV,kBAAC2B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKtC,QAAQ,WAAWuC,KAAK,cAE3B,kBAAC,IAAD,CAAgBX,UAAW1B,EAAUsC,eAFvC,sBA4BOC,EAdI,WAGjB,OACE,6BACE,kBAACnB,EAAA,EAAD,CAAMoB,WAAS,EAACC,QAAS,EAAGC,WAAW,SAASC,QAAQ,gBACrD3B,K,MC5DM4B,MAhBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,6BACE,kBAAC,EAAD,OAGF,6BACE,kBAAC,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.223c1cff.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nconst NavBar = () => {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"title\" color=\"inherit\">\n            React & Matrial UI Sample Applicaiton\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default NavBar;","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport CardActions from '@material-ui/core/CardActions';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nimport Fab from '@material-ui/core/Fab';\nimport CardMedia from '@material-ui/core/CardMedia';\n// import Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 100,\n    margin: \"auto\"\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 1,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n    borderRadius: 10,\n  },\n\n});\n\n// const theme = createMuiTheme();\n\nconst lessons = [\n  { title: \"Lesson 0: Setup\", img: '../assets/img/toDownload.png' },\n  { title: \"Lesson 1: HTML\", img: '../assets/img/toDownload.png' },\n  { title: \"Lesson 2: CSS\", img: '../assets/img/toDownload.png' },\n  { title: \"Lesson 3: Javascript\", img: '../assets/img/toDownload.png' },\n  { title: \"Lesson 4: React\", img: '../assets/img/toDownload.png' },\n  { title: \"Lesson 5: More React\", img: '../assets/img/toDownload.png' },]\n\nconst listItems = lessons.map((lesson) =>\n  < Grid item xs={12} sm={6} md={4}>\n    <Card className={useStyles.card} >\n\n      <CardContent borderColor=\"error.main\" border={2}>\n        <Typography variant=\"h4\" className={useStyles.title} color=\"textSecondary\" gutterBottom align=\"center\">\n          {lesson.title}\n        </Typography>\n        <CardMedia\n          component='img'\n          className={useStyles.media}\n          image={lesson.img}\n          title=\"Paella dish\"\n        />\n      </CardContent>\n      <CardActions>\n        <Fab variant=\"extended\" href='google.com'>\n\n          <NavigationIcon className={useStyles.extendedIcon} />\n          {/* <Link href=\"#\" >\n            Go To Lesson\n          </Link> */}\n          Go To Lesson\n        </Fab>\n\n      </CardActions>\n    </Card>\n  </Grid >\n)\n\nconst LessonList = () => {\n\n  // const classes = useStyles();\n  return (\n    <div>\n      <Grid container spacing={2} alignItems='center' justify='space-around'>\n        {listItems}\n\n      </Grid>\n    </div >\n  )\n}\n\n\nexport default LessonList;","import React from 'react';\nimport NavBar from './components/NavBar'\nimport LessonList from './components/LessonList'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div>\n        <NavBar></NavBar>\n\n      </div>\n      <div>\n        <LessonList>\n\n        </LessonList>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}